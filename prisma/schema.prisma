datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
}

model User {
  id                       String    @id @default(uuid())
  email                    String    @unique @db.VarChar(50)
  password                 String    @db.VarChar(255)
  isLocked                 Boolean   @default(false)
  profileId                String?   @unique
  profile                  Profile?  @relation(fields: [profileId], references: [id])
  OtpCodes                 OtpCode[]
  crmAccess                Boolean   @default(false)
  refreshToken             String?   @unique
  refreshTokenRevoked      Boolean   @default(false)
  passwordResetToken       String?   @db.VarChar(255)
  passwordResetTokenExpire DateTime?
  passwordChangedAt        DateTime?
  createdAt                DateTime  @default(now())

  @@map("users")
}

model Profile {
  id           String    @id @default(uuid())
  user         User?
  firstName    String    @db.VarChar(100)
  lastName     String    @db.VarChar(100)
  phoneNumber  String    @db.VarChar(100)
  organization String    @db.VarChar(100)
  address      String    @db.VarChar(255)
  visits       Visitor[]

  @@map("profiles")
}

model OtpCode {
  id        String   @id @default(uuid())
  otp       Int
  used      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("otp_codes")
}

model Visitor {
  id                          String   @id @default(uuid())
  profileId                   String
  user                        Profile  @relation(fields: [profileId], references: [id])
  guest                       Guest?
  site                        String   @db.VarChar(100)
  floor                       String   @db.VarChar(100)
  travelHistory               String
  dataPrivacyPolicyIsAccepted Boolean
  survey                      Json
  symptoms                    String[]

  @@map("visitors")
}

model Guest {
  id                 String  @id @default(uuid())
  visitorId          String  @unique
  visitor            Visitor @relation(fields: [visitorId], references: [id])
  personToVisit      String  @db.VarChar(100)
  personToVisitEmail String  @db.VarChar(100)
  purposeOfVisit     String  @db.VarChar(100)

  @@map("guests")
}

model Survey {
  id          String @id @default(uuid())
  surveyOrder Int
  question    String
  response    Json

  @@map("surveys")
}
