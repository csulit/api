datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "filterJson"]
}

model User {
  id                       String        @id @default(uuid())
  email                    String        @unique @db.VarChar(50)
  password                 String        @db.VarChar(255)
  isLocked                 Boolean       @default(false)
  profileId                String?       @unique
  profile                  Profile?      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  OtpCodes                 OtpCode[]
  qrCodes                  UserQrCode[]
  visits                   Visitor[]
  temperatures             Temperature[]
  crmAccess                Boolean       @default(false)
  isClientAccess           Boolean       @default(false)
  refreshToken             String?       @unique
  refreshTokenRevoked      Boolean       @default(false)
  passwordResetToken       String?       @db.VarChar(255)
  passwordResetTokenExpire DateTime?
  passwordChangedAt        DateTime?
  createdAt                DateTime      @default(now())

  @@map("users")
}

model Profile {
  id          String  @id @default(uuid())
  user        User?
  firstName   String  @db.VarChar(100)
  lastName    String  @db.VarChar(100)
  fullName    String? @db.VarChar(100)
  phoneNumber String  @db.VarChar(100)
  company     String  @db.VarChar(100)
  address     String  @db.VarChar(255)

  @@map("profiles")
}

model OtpCode {
  id        String   @id @default(uuid())
  otp       Int
  used      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("otp_codes")
}

model UserQrCode {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrName    String   @db.VarChar(100)
  qrUrl     String
  createdAt DateTime @default(now())

  @@map("user_qr_codes")
}

model Visitor {
  id                          String   @id @default(uuid())
  clear                       Boolean  @default(true)
  userId                      String
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guest                       Guest?
  eventId                     String?
  event                       Event?   @relation(fields: [eventId], references: [id])
  workType                    String?  @db.VarChar(100)
  leaveType                   String?  @db.VarChar(100)
  travelHistory               String?
  dataPrivacyPolicyIsAccepted Boolean
  locations                   Json[]
  survey                      Json[]
  symptoms                    String[]
  notes                       String?
  body                        String?
  date                        DateTime @default(now()) @db.Date
  createdAt                   DateTime @default(now())

  @@map("visitors")
}

model Temperature {
  id          String   @id @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  temperature String
  createdAt   DateTime @default(now())

  @@map("temperatures")
}

model Guest {
  id                 String    @id @default(uuid())
  visitorId          String    @unique
  visitor            Visitor   @relation(fields: [visitorId], references: [id], onDelete: Cascade)
  personToVisit      String    @db.VarChar(100)
  personToVisitEmail String    @db.VarChar(100)
  purposeOfVisit     String    @db.VarChar(100)
  isApproved         Boolean   @default(false)
  updatedAt          DateTime?

  @@map("guests")
}

model Event {
  id               String    @id @default(uuid())
  eventName        String    @db.VarChar(250)
  eventPhoto       String
  eventDescription String?
  eventActive      Boolean   @default(true)
  eventDate        DateTime
  eventLocation    Json
  visitors         Visitor[]

  @@map("events")
}

model Survey {
  id          String @id @default(uuid())
  surveyOrder Int
  question    String
  response    Json

  @@map("surveys")
}

model VmsVisitor {
  id             String  @id @default(uuid())
  firstName      String  @db.VarChar(50)
  lastName       String  @db.VarChar(50)
  companyToVisit String  @db.VarChar(100)
  personToVisit  String  @db.VarChar(100)
  reasonOfVisit  String  @db.VarChar(50)
  imageUrl       String?
  site           String  @db.VarChar(50)
  floor          String  @db.VarChar(50)
  body           String

  @@map("vms_visitors")
}

model VmsConfig {
  id              String  @id @default(uuid())
  siteConfigName  String  @db.VarChar(50)
  siteId          Int
  floor           String  @db.VarChar(50)
  canCaptureImage Boolean @default(true)
  isActive        Boolean @default(true)

  @@map("vms_configs")
}
